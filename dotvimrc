" Source external vimrc files
if filereadable(glob("~/.cal.vimrc")) 
    source ~/.cal.vimrc
endif
if filereadable(glob("~/.civ.vimrc")) 
    source ~/.civ.vimrc
endif

" Configure colour scheme, font, anmd window to fullscreen
if has("gui_running")
    colo wombat
    set guifont=Monospace\ 10
    set lines=999 columns=999
else
    set t_Co=256
    colorscheme wombat256mod
endif

" Turn on synutax highlighting
syntax on

"Turn on filetype detection
filetype on

" Highlight all search matches
set hlsearch

" Ignore case when searching
set ignorecase

" Highlight, then enter search mode
nnoremap <silent> <2-LeftMouse> :let @/='\V\<'.escape(expand('<cword>'), '\').'\>'<cr>:set hls<cr>

" Update file type associations
au BufRead, BufNewFile *.bbclass set filetype=make
au BufRead, BufNewFile *.bb set filetype=make
autocmd BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "normal! g`\"" |
\ endif

" Tell vim how man columns a tab counts for
set tabstop=4

" How many columns >> or << 
set shiftwidth=4

" Replaced tabs with spaces
set expandtab

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
  set mousemodel=popup_setpos
endif

" Auto-completion
set wildmenu
set wildmode=list:longest,full

" Alt+arrow window navigation
nmap <silent> <[A> :wincmd k<CR>
nmap <silent> <[B> :wincmd j<CR>
nmap <silent> <[D> :wincmd h<CR>
nmap <silent> <[C> :wincmd l<CR>

" Avoid "hit ENTER to continue" messages
set shortmess+=A

" Turn on line numbers
set number

" Highlight matching bracket
set showmatch
hi MatchParen cterm=bold ctermbg=green ctermfg=green

" Autoindent on new line
set autoindent

" Auto insert one extra level of indentation in various cases
set smartindent

imap <C-Return> <CR><CR><C-o>k<Tab>

" New window mapping
nmap <leader>sw<left>  :topleft  vnew<CR>
nmap <leader>sw<right> :botright vnew<CR>
nmap <leader>sw<up>    :topleft  new<CR>
nmap <leader>sw<down>  :botright new<CR>

" Notify by way of subtle highlighting of text exceeding 100 character limit
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%101v.\+/

" switch higlight no matter the previous state
nmap <F4> :set hls! <cr>

" Refresh cscope database 
nmap <F11> :!find . -iname '*.c' -o -iname '*.h' > cscope.files<CR>
  \:!cscope -b -i cscope.files -f cscope.out<CR>
  \:cs reset<CR><CR>

" hit '/' or '#' or '*' or 'L-Click' highlights then enter search mode
nnoremap / :set hlsearch<cr>/
nnoremap # :set hlsearch<cr>#
nnoremap * :set hlsearch<cr>*
nnoremap <silent> <2-LeftMouse> :let @/='\V\<'.escape(expand('<cword>'), '\').'\>'<cr>:set hls<cr>

" Start searching after each character is typed into the search
set incsearch

" Wrap text
set textwidth=200

" Display
set showcmd

" Detect updated files
set autoread

" Treat util files like tcl files, syntax highlighting
au BufNewFile,BufRead *.utils set filetype=tcl

" Treat *.dpl and *.ppl files as *.c
au BufRead,BufNewFile *.dpl set filetype=c
au BufRead,BufNewFile *.ppl set filetype=c

" git; wrap at 27 characters and spell check
au Filetype gitcommit set spell textwidth=72

autocmd BufRead,BufNewFile configurations.c call FoldPreprocessor()
function! FoldPreprocessor()
    set foldmarker=#ifdef,#endif
    set foldmethod=marker
endfunction

inoremap <F9> <C-O>za
nnoremap <F9> za
onoremap <F9> <C-C>za
vnoremap <F9> zf
