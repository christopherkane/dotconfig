# Source additional bash run configurations if present
[ -f ~/.civica.bashrc ] && source ~/.civica.bashrc

# Define colours
RED='\e[0;31m'
GREEN='\e[0;32m'
BLUE='\e[0;34m'
NORMAL='\e[0m'

# Function to extract various archives
extract () {
   if [ -f $1 ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf $1    ;;
           *.tar.gz)    tar xvzf $1    ;;
           *.bz2)       bunzip2 $1     ;;
           *.rar)       unrar x $1     ;;
           *.gz)        gunzip $1      ;;
           *.tar)       tar xvf $1     ;;
           *.tbz2)      tar xvjf $1    ;;
           *.tgz)       tar xvzf $1    ;;
           *.zip)       unzip $1       ;;
           *.Z)         uncompress $1  ;;
           *.7z)        7z x $1        ;;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file!"
   fi
 }

# Specify command to be run before prompt is displayed
PROMPT_COMMAND=smile_prompt

# Function sets PS1 to working directory with
# a smiley/frowney face prompt (depending on
# return code of last command) on a new line
function smile_prompt
{
  if [ "$?" -eq "0" ]
  then
    #smiley
    COLOR=${GREEN}
    PROMPT=":) #"
  else
    #frowney
    COLOR=${RED}
    PROMPT=":( #"
  fi

  # Display current working directory in a 
  # number (directory level) seperated format
  i=`pwd | grep -o '/' | wc -l`
  PWDEXT=${COLOR}`echo $PWD | sed 's,\/,,'`
  while [ $i -gt 0 ] ; do let i=i-1 && PWDEXT=`echo $PWDEXT | sed 's,\/, \\\e[100;97m'${i}'\\'${COLOR}' ,'`; done

  PS1="${PWDEXT}\n${COLOR}${PROMPT}${NORMAL} "
}

# Prompt displays current working directory in
# a number (directory level) format. This function
# changes directory to the level (number) specified
cds ()
{
    ME=''
    dd='../'
    if ! [[ "$1" =~ ^[0-9]+$ ]] ; 
    then
        exec >&2; echo "error: Not a number"; exit 1
    fi

    for (( c=0; c<$1; c++ ))
    do
        ME=$ME$dd
    done
    cd $ME
}


# Git 
alias gs='git status'
alias gdt='git difftool -y'

gitsub()
{
    git submodule update --init --recursive
    git submodule update --recursive
}

# Other Aliases
alias cl='clear'

# Fix this
gitlog ()
{
    currentSha1=`git log -n1 | grep commit | cut -d ' ' -f2`
    nextSha1=`git log -n2 | grep commit | tail -n +2 | cut -d ' ' -f2`
    num=18

    if [[ "$1" =~ ^[0-9]+$ ]]
    then
        num=$1
    fi
    
    clear
    clear
    git log master | grep $currentSha1 -B $num | sed '$ d'
    echo -e "--------------------------------------------------------------------------------\n"
    git log --color --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' -n1
    echo -e "\n--------------------------------------------------------------------------------\n"    
    git log master | grep $nextSha1 -A $num | sed '$ d'

}

# define color to additional file types
export LS_COLORS="*.c=0;35:*.h=0;35"

# leave some commands out of history log
export HISTIGNORE="&:??:[ ]*:ls:clear:exit:logout:pwd:cd:cl:lklk"
# ignore duplicate commands
export HISTCONTROL=ignoredups
# add time stamp
export HISTTIMEFORMAT="%h %d %H:%M:%S> "
# and set the size
export HISTSIZE=10000


